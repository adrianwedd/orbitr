name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run frontend tests
      run: npm test
    
    - name: Build frontend
      run: npm run build

  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run backend tests
      run: |
        cd backend
        pytest -v
    
    - name: Test API endpoints
      run: |
        cd backend
        python -c "
        import sys
        sys.path.append('.')
        from app import app
        from fastapi.testclient import TestClient
        client = TestClient(app)
        response = client.get('/')
        assert response.status_code == 200
        print('✅ API health check passed')
        "

  integration-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend
        pip install -r requirements.txt
    
    - name: Start backend in background
      run: |
        cd backend
        python app.py &
        sleep 10
    
    - name: Run integration tests
      run: |
        # Test that backend is responding
        curl -f http://localhost:8000/ || exit 1
        
        # Test generation endpoint (will use fake generation)
        curl -f -X POST http://localhost:8000/generate \
          -H "Content-Type: application/json" \
          -d '{"prompt": "test drum", "duration": 0.5}' || exit 1
        
        echo "✅ Integration tests passed"